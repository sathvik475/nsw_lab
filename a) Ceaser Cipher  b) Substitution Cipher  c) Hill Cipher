a)

import java.io.BufferedReader;
import java.io.IOException:
import java.io.InputStreamReader:
import java.util.Scanner;
public class CeaserCipher {
    static Scanner sc = new Scanner(System.in);
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)):
    public static void main(String[] args) throws IOException {    
    }
    System.out.print("Enter any String: "):
    String str= br.readLine():
    System.out.print("Enter the Key: ");
    int key sc.nextInt();
    String encrypted encrypt(str, key):
    System.out.println("\nEncrypted String is:"encrypted):
    String decrypted decrypt(encrypted, key):
    System.out.println("Decrypted String is:" decrypted);
    public static String encrypt(String str. int key) {
      String encrypted = "";
      for (int i = 0 i< str.length(); i++) {
        int c str.charAt(i):
        if (Character.isUpperCase(c)) {
          cc (key % 26): if (c> 'Z') c = c - 26
        } else if (Character.isLowerCase(c)) {
          cc (key % 26):
          if (c> 'z')
        }
        c = c - 26
        encrypted += (char) c:
      }
    return encrypted:
}
public static String decrypt(String str. int key) {
  String decrypted = "";
  for (int i = 0 i < str.length(): i++) {
    int cstr.charAt(i):
    if (Character.isUpperCase(c)) {
      cc (key % 26): if (c < 'A') c = c + 26
    } else if (Character.isLowerCase(c)) {
      (key % 26): if (c'a')
    }
    c = c + 26
    decrypted = (char) c;
  }
  return decrypted:
}


(b)


import java.io.*;
import java.util.*;
public class SubstitutionCipher {
  static Scanner sc = new Scanner(System.in);
  static BufferedReader br new BufferedReader(new InputStreamReader(System.in));
  public static void main(String[] args) throws IOException {
    String plain "abcdefghijklmnopqrstuvwxyz";
    String cipher = "zyxwwutsrqponmlkjihgfedcba":
    System.out.print("Enter any string (lowercase letters only): ");
    String str br.readLine();
    String encrypted = "";
    char c;
    for (int i=0; i < str.length(); i++) {
      c = str.charAt(i);
      int index plain.indexOf(c);
      if (index != -1) {
        encrypted + cipher.charAt(index);
      } else {
        encrypted += c;
      }
    }  
    System.out.println("The encrypted data is: + encrypted);
  }
}


(C)


import java.io.*;
import java.util.*;
public class HillCipher {
  static float[][] decrypt new float[3] [1];
  static float[][] a = new float [3] [3];
  static float[] [] b new float[3][3];
  static float[][] mes new float [3] [1]:
  static float[][] res new float[3][1]:
  static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
  static Scanner sc = new Scanner(System.in);
  public static void main(String[] args) throws IOException {
  }
  getkeymes();
  for (int i = 0i i < 3; i++)
    for (int j=0; j < 1 j++)
      for (int k 0; k < 3 k++)
        res[i][j] = res[i][j] a[i][k] mes [k][j];
  System.out.print("\nEncrypted string is:");
  for (int i = 0 i < 3 i++) {
  System.out.print((char) ((res[i][0]% 2626)% 2697));
  res[i][0] = res[1][0];
  }
  inverse();
  for (int hat i = 0 ; i < 3 ;i++)
    for (int j = 0 j < 1 j)
      for (int k = 0 k < 3 : k++)
        decrypt[i][j]) decrypt [i][j]b[i][k]* res[k][j]:
  System.out.print("Decrypted string is:");
  for (int i = 0 i < 3 1) {
  }
  System.out.print((char) (((Math.round(decrypt[i][0]) % 26 26) % 26) + 97));
  System.out.print("\n");
  public static void getkeymes() throws IOException {
    System.out.println("Enter 3x3 matrix for key (It should be inversible): ");
    for (int i = 0 i < 3 i--)
      for (int J = 0 j < 3 j++) a[i][j] sc.nextFloat();
        System.out.print("\nEnter a 3 letter string: ");
    String msg = br.readLine();
    String msg br.readLine();
    for (int i = 0 i < 3 i++)
      mes[i][0] msg.charAt(1) 97;
    }
    public static void inverse() {
      float p. q:
      float[][] c new float[3][3]:
      for (int i = 0 i < 3 i++)
        for (int j = 0 j < 3; j++) {
          c[i][j]=a[i][j]; b[i][j] = (ij)?1:0:
      for (int k = 0 k < 3 k++) {
        for (int i = 0 i < 3 1) {
            if (ik) { pc[i][k]; q = c[k][k]: for (int j = 0 j < 3 j++) { c[i][j]c[i][j]qpc[k][j]: b[i][j]b[i][j]qpb[k][j]:
      }
    }
  }
}
for (int i = 0 i < 3 1) {
float div c[i][i];
for (int J < 3 j++) { J = 0
b[i][j]b[i][j] / div;
}
}
System.out.println("Inverse Matrix is:");
for (int 10; 13; 1) {
for (int j = 0 j < 3 j)
System.out.println(b[i][j] (2?""));
